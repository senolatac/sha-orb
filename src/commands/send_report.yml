description: >
  Download Codacy's coverage reporter and run it

parameters:
  coverage-reports:
    default: ""
    description: Optional comma separated list of coverage reports to send to Codacy
    type: string
  project-token:
    default: ${CODACY_PROJECT_TOKEN}
    description: Specify Codacy's project token
    type: string
  skip:
    default: false
    description: Skip if token isn't defined. Useful to let forks CI pass without passing secrets
    type: boolean
  tool_version:
    default: ""
    description: Specify Codacy's coverage reporter tool version
    type: string
steps:
  - run:
      command: |
        export CODACY_REPORTER_VERSION=<< parameters.tool_version >>
        export CODACY_PROJECT_TOKEN=<< parameters.project-token >>
        report_array=$(printf "<< parameters.coverage-reports >>" | cut -d',' -f1)

        params=''
        for report in $report_array
        do
            if [ ! -z "$report" ]
            then
                params="$params -r $report"
            fi
        done

        if << parameters.skip >>; then
            skip_option="--skip"
        else
            skip_option=""
        fi


        if [ -x "$(which curl)" ]; then
            curl -Ls https://coverage.codacy.com/get.sh > get.sh
        elif [ -x "$(which wget)" ] ; then
            wget -qO - https://coverage.codacy.com/get.sh > get.sh
        else
            printf "Could not find curl or wget, please install one."
        fi

        source get.sh report $params --partial $skip_option &&\
        source get.sh final $skip_option
      name: Upload Coverage Results to Codacy
